{"version":3,"sources":["data/MockData.jsx","components/AddPatient.jsx","components/EditPatient.jsx","components/PatientsList.jsx","App.js","serviceWorker.js","index.js"],"names":["MockData","id","name","surname","age","birth","Date","AddPatient","props","initialFormState","undefined","isEmpty","isDisabled","handleFormSubmit","event","preventDefault","addNewPatient","state","setState","history","push","handleDayChange","bind","dob","diff_ms","now","getTime","age_dt","Math","abs","getUTCFullYear","this","target","value","modifiers","dayPickerInput","input","getInput","trim","disabled","calculateAge","onSubmit","icon","faUser","color","className","type","required","placeholder","onChange","e","handleInputChange","formatDate","parseDate","onDayChange","dayPickerProps","initialMonth","selectedDays","disabledDays","after","faCheck","size","Component","withRouter","EditPatient","initialState","location","patient","editPatient","faUserEdit","patientList","deletePatient","console","log","length","map","key","format","onClick","pathname","faEdit","faTrashAlt","to","faPlus","App","lastIndex","getLastId","updatedPatient","filter","editing","window","reload","faHome","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a9a26e46.chunk.js","sourcesContent":["const MockData = [\n  { id: 0, name: 'Manuel', surname: 'Pereira', age: 30, birth: new Date(1989, 1) },\n  { id: 1, name: 'Eddo', surname: 'Park', age: 51, birth: new Date(1968, 1) },\n  { id: 2, name: 'Clark', surname: 'Syntherion', age: 45, birth: new Date(1974, 1) },\n  { id: 3, name: 'Aphex', surname: 'Singlar', age: 90, birth: new Date(1930, 1) },\n]\n\n\nexport default MockData","import React, { Component } from 'react'\nimport { withRouter } from \"react-router-dom\";\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\nimport { now } from 'moment';\nimport 'react-day-picker/lib/style.css';\nimport {\n  formatDate,\n  parseDate,\n} from 'react-day-picker/moment';\nimport '../index.css'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faUser,faCheck } from '@fortawesome/free-solid-svg-icons'\n\n\nclass AddPatient extends Component {\n  constructor(props) {\n    super(props);\n    this.state = this.initialFormState\n    this.handleDayChange = this.handleDayChange.bind(this);\n  };\n\n\n  initialFormState = {\n    name: '',\n    surname: '',\n    age: undefined,\n    birth: undefined,\n    isEmpty: true,\n    isDisabled: false,\n  }\n\n\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    this.props.addNewPatient(this.state);\n    this.setState(this.initialFormState)\n    this.props.history.push('/');\n  }\n\n  calculateAge(dob) {\n    var diff_ms = Date.now() - dob.getTime();\n    var age_dt = new Date(diff_ms);\n    const age = Math.abs(age_dt.getUTCFullYear() - 1970);\n    this.setState({ age });\n  }\n\n  handleInputChange(event) {\n    const { value, name } = event.target;\n    this.setState({ [name]: value });\n  }\n\n  handleDayChange(birth, modifiers, dayPickerInput) {\n    const input = dayPickerInput.getInput();\n    this.setState({\n      birth,\n      isEmpty: !input.value.trim(),\n      isDisabled: modifiers.disabled === true,\n    });\n    birth && this.calculateAge(birth);\n  }\n\n\n\n\n  render() {\n    const { birth } = this.state;\n\n    return (\n      <>\n        <h3>Register a new patient</h3>\n        <form onSubmit={this.handleFormSubmit}>\n\n          <p><FontAwesomeIcon icon={faUser} color='slategrey' /></p>\n          <div className=\"input-box\">\n            <input type=\"text\" required name=\"name\" placeholder=\"Enter patients name...\" value={this.state.name} onChange={e => this.handleInputChange(e)} />\n          </div>\n\n          <div className=\"input-box\">\n            <input type=\"text\" required name=\"surname\" placeholder=\"...surname\" value={this.state.surname} onChange={e => this.handleInputChange(e)} />\n          </div>\n\n          <div className=\"input-box\">\n      \n            <DayPickerInput\n              formatDate={formatDate}\n              parseDate={parseDate}\n              placeholder={'Pick a Date'}\n              value={birth}\n              onDayChange={this.handleDayChange}\n              dayPickerProps={{\n                initialMonth: new Date(2001, 1),\n                selectedDays: birth,\n                disabledDays: {\n                  after: new Date(now), // substract 18 years\n                },\n              }}\n            />\n            {/* <FontAwesomeIcon icon={faCalendarAlt} size='sm'/> */}\n          </div>\n            <button className=\"end-form\"><p><FontAwesomeIcon icon={faCheck} size='lg'/></p></button>\n        </form >\n      </>\n    )\n  }\n}\n\nexport default withRouter(AddPatient) ","import React, { Component } from 'react'\nimport { withRouter } from \"react-router-dom\";\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\nimport { now } from 'moment';\nimport 'react-day-picker/lib/style.css';\nimport {\n  formatDate,\n  parseDate,\n} from 'react-day-picker/moment';\nimport '../index.css'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCheck, faUserEdit } from '@fortawesome/free-solid-svg-icons'\n\n\nclass EditPatient extends Component {\n  constructor(props) {\n    super(props);\n    this.state = this.initialState;\n    this.handleDayChange = this.handleDayChange.bind(this);\n\n  }\n\n  initialState = this.props.location.state.patient;\n\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    this.props.editPatient(this.state);\n    this.props.history.push('/');\n  }\n\n  calculateAge(dob) {\n    var diff_ms = Date.now() - dob.getTime();\n    var age_dt = new Date(diff_ms);\n    const age = Math.abs(age_dt.getUTCFullYear() - 1970);\n    this.setState({ age });\n  }\n\n  handleInputChange(event) {\n    const { value, name } = event.target;\n    this.setState({ [name]: value });\n  }\n\n  handleDayChange(birth, modifiers, dayPickerInput) {\n    const input = dayPickerInput.getInput();\n    this.setState({\n      birth,\n      isEmpty: !input.value.trim(),\n      isDisabled: modifiers.disabled === true,\n    });\n    birth && this.calculateAge(birth);\n  }\n\n  render() {\n    const { birth, isDisabled, isEmpty } = this.state;\n    return (\n      <>\n        <h3>Editing <span>{this.state.name} {this.state.surname}</span></h3>\n        <form onSubmit={this.handleFormSubmit}>\n\n        <p><FontAwesomeIcon icon={faUserEdit} color='slategrey' /></p>\n          <div className=\"input-box\">\n            <input type=\"text\" required name=\"name\" value={this.state.name} onChange={e => this.handleInputChange(e)} />\n          </div>\n\n          <div className=\"input-box\">\n            <input type=\"text\" required name=\"surname\" value={this.state.surname} onChange={e => this.handleInputChange(e)} />\n          </div>\n\n          <div className=\"input-box\">\n              {isEmpty && 'Edit birthday'}\n              {!isEmpty && !birth && 'This day is invalid'}\n              {birth && isDisabled && 'This day is disabled'}\n              {/* {birth &&\n                !isDisabled &&\n                `You chose ${birth.toLocaleDateString()}`} */}\n\n            <DayPickerInput\n              formatDate={formatDate}\n              parseDate={parseDate}\n              value={birth}\n              onDayChange={this.handleDayChange}\n              dayPickerProps={{\n                initialMonth: new Date(2001, 1),\n                selectedDays: birth,\n                disabledDays: {\n                  after: new Date(now), // substract 18 years\n                },\n              }}\n            />\n          </div>\n          <button className=\"end-form\"><p><FontAwesomeIcon icon={faCheck} size='lg'/></p></button>\n        </form>\n      </>\n    )\n  }\n}\n\nexport default withRouter(EditPatient)\n","import React from 'react'\nimport { Link,withRouter } from \"react-router-dom\";\nimport Moment from 'react-moment'\nimport '../index.css'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faEdit,faTrashAlt, faPlus } from '@fortawesome/free-solid-svg-icons'\n\nconst PatientsList = ({ patientList, editPatient, deletePatient, addNewPatient,history }) => {\n  console.log(patientList);\n\n  return (    \n    <>\n    <h3>Patients List</h3>\n      <table>\n        <thead>\n          <tr>\n            <th>Id</th>\n            <th>Name</th>\n            <th>Surname</th>\n            <th>Age</th>\n            <th>Birth Date</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {            \n            patientList.length > 0 ? (\n              patientList.map(patient => (\n                <tr key={patient.id}>\n                  <td className='id'>{patient.id}</td>\n                  <td>{patient.name}</td>\n                  <td>{patient.surname}</td>\n                  <td>{patient.age}</td>\n                  <td><Moment format=\"DD.MM.YYYY\">{patient.birth}</Moment></td>\n                  <td><button onClick={() => history.push({\n                    pathname:'/edit',\n                    state:{patient}\n                    })}><p><FontAwesomeIcon icon={faEdit} size='lg'/></p></button></td>\n\n                  <td><button onClick={() => { deletePatient(patient.id) }}><p><FontAwesomeIcon icon={faTrashAlt} size='lg'/></p></button></td>\n                </tr>\n              )\n              )\n            ) : (\n                <tr>\n                  <td>No patients yet.</td>\n                </tr>\n              )\n          }\n        </tbody>\n      </table >\n      <div className=\"register-area\">\n      <Link to=\"/add\"><p><FontAwesomeIcon icon={faPlus} size='lg'/> Register new patient </p></Link>\n      </div>\n    </>\n  )\n}\n\nexport default withRouter(PatientsList)\n\n\n","import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n} from \"react-router-dom\";\nimport MockData from './data/MockData'\nimport AddPatient from './components/AddPatient'\nimport EditPatient from './components/EditPatient'\nimport PatientsList from './components/PatientsList'\nimport './index.css'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faHome } from '@fortawesome/free-solid-svg-icons'\n\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      id: undefined,\n      patient: {},\n      patientList: [],\n    }\n\n    this.addNewPatient = this.addNewPatient.bind(this);\n    this.deletePatient = this.deletePatient.bind(this);\n    this.editPatient = this.editPatient.bind(this);\n  }\n\n\n  componentDidMount() {\n    this.setState({ patientList: MockData });\n  }\n\n  getLastId() {\n    if (this.state.patientList.length - 1 <= 0) return 0;\n    const lastIndex = this.state.patientList.length - 1;\n    return this.state.patientList[lastIndex].id + 1;\n  }\n\n  addNewPatient(patient) {\n    patient.id = this.getLastId();\n    this.setState({ patientList: [...this.state.patientList, patient] });\n  }\n\n  editPatient(updatedPatient) {\n    const patientList = this.state.patientList.map((patient) => (patient.id === updatedPatient.id ? updatedPatient : patient));\n    this.setState({ patientList: patientList });\n  }\n\n  deletePatient(id) {\n    const patientList = this.state.patientList.filter(patient => patient.id !== id);\n    this.setState({ patientList: patientList });\n    if (this.state.editing === true) {\n      window.location.reload();\n    }\n  }\n\n  render() {\n    const { patientList } = this.state;\n    return (\n      <div className='container'>\n        <Router>\n          <nav >\n            <ul>\n              <li>\n                <Link to=\"/\"><p><FontAwesomeIcon icon={faHome} size='lg'/></p></Link>\n              </li>\n              {/* <li>\n                <Link to=\"/add\">Add</Link>\n              </li> */}\n              {/* <li>\n                <Link to=\"/edit\">Edit</Link>\n              </li> */}\n            </ul>\n          </nav>\n          <Switch>\n            <Route exact path=\"/\" component={() => <PatientsList patientList={patientList} editPatient={this.editPatient} deletePatient={this.deletePatient} addNewPatient={this.addNewPatient} />} />\n            <Route exact path=\"/add\" component={() => <AddPatient addNewPatient={this.addNewPatient} />} />\n            <Route exact path=\"/edit\" component={() => <EditPatient patient={this.state.patient} editPatient={this.editPatient} />} />\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './reset.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
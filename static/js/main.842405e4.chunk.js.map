{"version":3,"sources":["data/MockData.jsx","components/CalculateAge.jsx","components/AddPatient.jsx","components/EditPatient.jsx","components/PatientsList.jsx","App.js","serviceWorker.js","index.js"],"names":["MockData","id","name","surname","age","birth","Date","CalculateAge","dob","diff_ms","now","getTime","age_dt","Math","abs","getUTCFullYear","withRouter","addNewPatient","history","initialState","undefined","isEmpty","isDisabled","useState","user","setUser","handleInputChange","event","target","value","onSubmit","preventDefault","push","icon","faUser","color","className","type","required","placeholder","onChange","e","formatDate","parseDate","onDayChange","modifiers","dayPickerInput","input","getInput","trim","disabled","dayPickerProps","initialMonth","selectedDays","disabledDays","after","faCheck","size","editPatient","location","initialeditUser","state","patient","editUser","setEditUser","faUserEdit","patientList","deletePatient","length","map","key","format","onClick","pathname","faEdit","faTrashAlt","to","faPlus","App","setPatientList","lastIndex","getLastId","updatedPatient","updatedPatientList","patientListWithDeletion","filter","faHome","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.842405e4.chunk.js","sourcesContent":["const MockData = [\n  { id: 0, name: 'Manuel', surname: 'Pereira', age: 30, birth: new Date(1989, 1) },\n  { id: 1, name: 'Eddo', surname: 'Park', age: 51, birth: new Date(1968, 1) },\n  { id: 2, name: 'Clark', surname: 'Syntherion', age: 45, birth: new Date(1974, 1) },\n  { id: 3, name: 'Aphex', surname: 'Singlar', age: 90, birth: new Date(1930, 1) },\n]\n\n\nexport default MockData","const CalculateAge = dob => {\n  var diff_ms = Date.now() - dob.getTime();\n  var age_dt = new Date(diff_ms);\n  const age = Math.abs(age_dt.getUTCFullYear() - 1970);\n  return age;\n}\n\nexport default CalculateAge","import React, { useState } from 'react'\nimport { withRouter } from \"react-router-dom\";\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\nimport { now } from 'moment';\nimport 'react-day-picker/lib/style.css';\nimport {\n  formatDate,\n  parseDate,\n} from 'react-day-picker/moment';\nimport '../index.css'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faUser, faCheck } from '@fortawesome/free-solid-svg-icons'\nimport CalculateAge from './CalculateAge'\n\n\nconst AddPatient = ({ addNewPatient,history }) => {\n  const initialState = {\n    name: '',\n    surname: '',\n    age: undefined,\n    birth: undefined,\n    isEmpty: true,\n    isDisabled: false,\n  }\n\n  const [user, setUser] = useState(initialState);\n\n  const handleInputChange = event => {\n    const { value, name } = event.target;\n    setUser({ ...user, [name]: value });\n  }\n\n  const handleFormSubmit = (event) => {\n    event.preventDefault();\n    addNewPatient(user);\n    setUser(initialState);\n    history.push('/');\n  }\n\n  const handleDayChange = (birth, modifiers, dayPickerInput) => {\n    const input = dayPickerInput.getInput();\n    const age = birth && CalculateAge(birth);\n    setUser({ ...user, birth, age, isEmpty: !input.value.trim(), isDisabled: modifiers.disabled === true });\n  }\n\n    return (\n      <>\n        <h3>Register a new patient</h3>\n\n        <form onSubmit={handleFormSubmit}>\n          <p><FontAwesomeIcon icon={faUser} color='slategrey' /></p>\n\n          <div className=\"input-box\">\n            <input type=\"text\" required name=\"name\" placeholder=\"Enter patients name...\" value={user.name} onChange={handleInputChange} />\n          </div>\n\n          <div className=\"input-box\">\n            <input type=\"text\" required name=\"surname\" placeholder=\"...surname\" value={user.surname} onChange={e => handleInputChange(e)} />\n          </div>\n\n          <div className=\"input-box\">\n            <DayPickerInput\n              formatDate={formatDate}\n              parseDate={parseDate}\n              placeholder={'Pick a Date'}\n              value={user.birth}\n              onDayChange={handleDayChange}\n              dayPickerProps={{\n                initialMonth: new Date(2001, 1),\n                selectedDays: user.birth,\n                disabledDays: {\n                  after: new Date(now), // substract 18 years\n                },\n              }}\n            />\n          </div>\n          <button className=\"end-form\"><p><FontAwesomeIcon icon={faCheck} size='4x' /></p></button>\n        </form >\n      </>\n    )\n  }\n\nexport default withRouter(AddPatient) ","import React, { useState } from 'react'\nimport { withRouter } from \"react-router-dom\";\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\nimport { now } from 'moment';\nimport 'react-day-picker/lib/style.css';\nimport {\n  formatDate,\n  parseDate,\n} from 'react-day-picker/moment';\nimport '../index.css'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCheck, faUserEdit } from '@fortawesome/free-solid-svg-icons'\nimport CalculateAge from './CalculateAge'\n\nconst EditPatient = ({ editPatient, location, history }) => {\n  const initialeditUser = location.state.patient;\n  const [editUser, setEditUser] = useState(initialeditUser)\n\n  const handleFormSubmit = (event) => {\n    event.preventDefault();\n    editPatient(editUser);\n    history.push('/');\n  }\n\n  const handleInputChange = (event) => {\n    const { value, name } = event.target;\n    setEditUser({ ...editUser, [name]: value });\n  }\n\n  const handleDayChange = (birth, modifiers, dayPickerInput) => {\n    const input = dayPickerInput.getInput();\n    const age = birth && CalculateAge(birth);\n    setEditUser({ ...editUser, birth, age, isEmpty: !input.value.trim(), isDisabled: modifiers.disabled === true });\n  }\n\n\n  return (\n    <>\n      <h3>Editing <span>{editUser.name} {editUser.surname}</span></h3>\n      <form onSubmit={handleFormSubmit}>\n\n        <p><FontAwesomeIcon icon={faUserEdit} color='slategrey' /></p>\n        <div className=\"input-box\">\n          <input type=\"text\" required name=\"name\" value={editUser.name} onChange={e => handleInputChange(e)} />\n        </div>\n\n        <div className=\"input-box\">\n          <input type=\"text\" required name=\"surname\" value={editUser.surname} onChange={e => handleInputChange(e)} />\n        </div>\n\n        <div className=\"input-box\">\n          {editUser.isEmpty && 'Edit birthday'}\n          {!editUser.isEmpty && !editUser.birth && 'This day is invalid'}\n          {editUser.birth && editUser.isDisabled && 'This day is disabled'}\n          {/* {birth &&\n                !isDisabled &&\n                `You chose ${birth.toLocaleDateString()}`} */}\n\n          <DayPickerInput\n            formatDate={formatDate}\n            parseDate={parseDate}\n            value={editUser.birth}\n            onDayChange={handleDayChange}\n            dayPickerProps={{\n              initialMonth: new Date(2001, 1),\n              selectedDays: editUser.birth,\n              disabledDays: {\n                after: new Date(now), // substract 18 years\n              },\n            }}\n          />\n        </div>\n        <button className=\"end-form\"><p><FontAwesomeIcon icon={faCheck} size='4x' /></p></button>\n      </form>\n    </>\n  )\n}\n\n\nexport default withRouter(EditPatient)\n","import React from 'react'\nimport { Link,withRouter } from \"react-router-dom\";\nimport Moment from 'react-moment'\nimport '../index.css'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faEdit,faTrashAlt, faPlus } from '@fortawesome/free-solid-svg-icons'\n\nconst PatientsList = ({ patientList, editPatient, deletePatient, addNewPatient,history }) => {\n\n  return (    \n    <>\n    <h3>Patients List</h3>\n      <table>\n        <thead>\n          <tr>\n            <th>Id</th>\n            <th>Name</th>\n            <th>Surname</th>\n            <th>Age</th>\n            <th>Birth Date</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {            \n            patientList.length > 0 ? (\n              patientList.map(patient => (\n                <tr key={patient.id}>\n                  <td className='id'>{patient.id}</td>\n                  <td>{patient.name}</td>\n                  <td>{patient.surname}</td>\n                  <td>{patient.age}</td>\n                  <td><Moment format=\"DD.MM.YYYY\">{patient.birth}</Moment></td>\n                  <td><button onClick={() => history.push({\n                    pathname:'/edit',\n                    state:{patient}\n                    })}><p><FontAwesomeIcon icon={faEdit} size='lg'/></p></button></td>\n\n                  <td><button onClick={() => { deletePatient(patient.id) }}><p><FontAwesomeIcon icon={faTrashAlt} size='lg'/></p></button></td>\n                </tr>\n              )\n              )\n            ) : (\n                <tr>\n                  <td>No patients yet.</td>\n                </tr>\n              )\n          }\n        </tbody>\n      </table >\n      <div className=\"register-area\">\n      <Link to=\"/add\"><p><FontAwesomeIcon icon={faPlus} size='4x'/></p></Link>\n      </div>\n    </>\n  )\n}\n\nexport default withRouter(PatientsList)\n\n\n","import React, { useState } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n} from \"react-router-dom\";\nimport MockData from './data/MockData'\nimport AddPatient from './components/AddPatient'\nimport EditPatient from './components/EditPatient'\nimport PatientsList from './components/PatientsList'\nimport './index.css'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faHome } from '@fortawesome/free-solid-svg-icons'\n\n\nconst App = () => {\n\n  const [id, setId] = useState(undefined);\n  const [patient, setPatient] = useState({});\n  const [patientList, setPatientList] = useState(MockData);\n\n\n  const getLastId = () => {\n    if (patientList.length - 1 <= 0) return 0;\n    const lastIndex = patientList.length - 1;\n    return patientList[lastIndex].id + 1;\n  }\n\n  const addNewPatient = (patient) => {\n    patient.id = getLastId();\n    setPatientList([...patientList,patient])\n  }\n\n  const editPatient = (updatedPatient)=> {\n    const updatedPatientList = patientList.map((patient) => (patient.id === updatedPatient.id ? updatedPatient : patient));\n    setPatientList(updatedPatientList);\n  }\n  \n  const deletePatient = (id) => {\n    const patientListWithDeletion = patientList.filter(patient => patient.id !== id);\n    setPatientList(patientListWithDeletion);\n  }\n    \n    return (\n      <div className='container'>\n        <Router>\n          <nav >\n            <ul>\n              <li>\n                <Link to=\"/\"><p><FontAwesomeIcon className='icon' icon={faHome} size='4x' color='turquoise' /></p></Link>\n              </li>\n            </ul>\n          </nav>\n          <Switch>\n            <Route exact path=\"/\" component={() => <PatientsList patientList={patientList} editPatient={editPatient} deletePatient={deletePatient} addNewPatient={addNewPatient} />} />\n            <Route exact path=\"/add\" component={() => <AddPatient addNewPatient={addNewPatient} />} />\n            <Route exact path=\"/edit\" component={() => <EditPatient patient={patient} editPatient={editPatient} />} />\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './reset.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}